{"remainingRequest":"C:\\Users\\Md Arif Hasan\\Desktop\\spl2\\SPL2_TGMS\\SPL2_TGMS\\tgms\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Md Arif Hasan\\Desktop\\spl2\\SPL2_TGMS\\SPL2_TGMS\\tgms\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Md Arif Hasan\\Desktop\\spl2\\SPL2_TGMS\\SPL2_TGMS\\tgms\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Md Arif Hasan\\Desktop\\spl2\\SPL2_TGMS\\SPL2_TGMS\\tgms\\src\\components\\Home.vue?vue&type=template&id=8dc7cce2&scoped=true&","dependencies":[{"path":"C:\\Users\\Md Arif Hasan\\Desktop\\spl2\\SPL2_TGMS\\SPL2_TGMS\\tgms\\src\\components\\Home.vue","mtime":1654431627991},{"path":"C:\\Users\\Md Arif Hasan\\Desktop\\spl2\\SPL2_TGMS\\SPL2_TGMS\\tgms\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1654407432147},{"path":"C:\\Users\\Md Arif Hasan\\Desktop\\spl2\\SPL2_TGMS\\SPL2_TGMS\\tgms\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1654407483391},{"path":"C:\\Users\\Md Arif Hasan\\Desktop\\spl2\\SPL2_TGMS\\SPL2_TGMS\\tgms\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1654407432147},{"path":"C:\\Users\\Md Arif Hasan\\Desktop\\spl2\\SPL2_TGMS\\SPL2_TGMS\\tgms\\node_modules\\vue-loader\\lib\\index.js","mtime":1654407483388}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}