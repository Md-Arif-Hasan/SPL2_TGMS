{"remainingRequest":"C:\\Users\\Md Arif Hasan\\Desktop\\spl2\\tgms\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Md Arif Hasan\\Desktop\\spl2\\tgms\\src\\components\\Home.vue?vue&type=template&id=8dc7cce2&scoped=true&","dependencies":[{"path":"C:\\Users\\Md Arif Hasan\\Desktop\\spl2\\tgms\\src\\components\\Home.vue","mtime":1652178933496},{"path":"C:\\Users\\Md Arif Hasan\\Desktop\\spl2\\tgms\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651850902713},{"path":"C:\\Users\\Md Arif Hasan\\Desktop\\spl2\\tgms\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1651850905805},{"path":"C:\\Users\\Md Arif Hasan\\Desktop\\spl2\\tgms\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651850902713},{"path":"C:\\Users\\Md Arif Hasan\\Desktop\\spl2\\tgms\\node_modules\\vue-loader\\lib\\index.js","mtime":1651850897639}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}