{"remainingRequest":"D:\\SPL-2\\tgms\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\SPL-2\\tgms\\src\\components\\Home.vue?vue&type=template&id=8dc7cce2&scoped=true&","dependencies":[{"path":"D:\\SPL-2\\tgms\\src\\components\\Home.vue","mtime":1652178882789},{"path":"D:\\SPL-2\\tgms\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651850902713},{"path":"D:\\SPL-2\\tgms\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1651850905805},{"path":"D:\\SPL-2\\tgms\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651850902713},{"path":"D:\\SPL-2\\tgms\\node_modules\\vue-loader\\lib\\index.js","mtime":1651850897639}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPGxpbmsKICAgIGhyZWY9Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vZm9udC1hd2Vzb21lLzQuMy4wL2Nzcy9mb250LWF3ZXNvbWUubWluLmNzcyIKICAgIHJlbD0ic3R5bGVzaGVldCIKICAvPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIiPgogICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPgogICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICA8IS0tIExlZnQgc2lkZWJhciAtLT4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMyBjb2wtbWQtNCI+CiAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICBocmVmPSJtYWlsLWNvbXBvc2UuaHRtbCIKICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tZGFuZ2VyIHdhdmVzLWVmZmVjdCB3YXZlcy1saWdodCBidG4tYmxvY2siCiAgICAgICAgICAgICAgICAgID5OZXcgTWFpbDwvYQogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBzaGFkb3ctbm9uZSBtdC0zIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGlzdC1ncm91cCBzaGFkb3ctbm9uZSI+CiAgICAgICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii9sb2dpbiIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0gYWN0aXZlIgogICAgICAgICAgICAgICAgICAgICAgPjxpIGNsYXNzPSJmYSBmYS1pbmJveCBtci0yIj48L2k+TG9naW4gIDxiPigxMik8L2I+PC9hCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgpOyIgY2xhc3M9Imxpc3QtZ3JvdXAtaXRlbSIKICAgICAgICAgICAgICAgICAgICAgID48aSBjbGFzcz0iZmEgZmEtc3Rhci1vIG1yLTIiPjwvaT4gUmVnaXN0ZXI8L2EKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKCk7IiBjbGFzcz0ibGlzdC1ncm91cC1pdGVtIgogICAgICAgICAgICAgICAgICAgICAgPjxpIGNsYXNzPSJmYSBmYS1maWxlLXRleHQtbyBtci0yIj48L2k+RHJhZnQKICAgICAgICAgICAgICAgICAgICAgIDxiPigxMCk8L2I+PC9hCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgpOyIgY2xhc3M9Imxpc3QtZ3JvdXAtaXRlbSIKICAgICAgICAgICAgICAgICAgICAgID48aSBjbGFzcz0iZmEgZmEtcGFwZXItcGxhbmUtbyBtci0yIj48L2k+U2VudCBNYWlsPC9hCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgpOyIgY2xhc3M9Imxpc3QtZ3JvdXAtaXRlbSIKICAgICAgICAgICAgICAgICAgICAgID48aSBjbGFzcz0iZmEgZmEtdHJhc2gtbyBtci0yIj48L2k+VHJhc2ggPGI+KDMyMCk8L2I+PC9hCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgpOyIgY2xhc3M9Imxpc3QtZ3JvdXAtaXRlbSIKICAgICAgICAgICAgICAgICAgICAgID48aSBjbGFzcz0iZmEgZmEtYm9va21hcmsgbXItMiI+PC9pPkltcG9ydGFudAogICAgICAgICAgICAgICAgICAgICAgPGI+KDUpPC9iPjwvYQogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoKTsiIGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0iCiAgICAgICAgICAgICAgICAgICAgICA+TGFiZWxzPC9hCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgpOyIgY2xhc3M9Imxpc3QtZ3JvdXAtaXRlbSIKICAgICAgICAgICAgICAgICAgICAgID48c3BhbiBjbGFzcz0iZmEgZmEtY2lyY2xlIHRleHQtaW5mbyBmbG9hdC1yaWdodCI+PC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICA+V29yazwvYQogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoKTsiIGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0iCiAgICAgICAgICAgICAgICAgICAgICA+PHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWNpcmNsZSB0ZXh0LXdhcm5pbmcgZmxvYXQtcmlnaHQiCiAgICAgICAgICAgICAgICAgICAgICA+PC9zcGFuCiAgICAgICAgICAgICAgICAgICAgICA+RGVzaWduPC9hCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgpOyIgY2xhc3M9Imxpc3QtZ3JvdXAtaXRlbSIKICAgICAgICAgICAgICAgICAgICAgID48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtY2lyY2xlIHRleHQtcHJpbWFyeSBmbG9hdC1yaWdodCIKICAgICAgICAgICAgICAgICAgICAgID48L3NwYW4KICAgICAgICAgICAgICAgICAgICAgID5GYW1pbHk8L2EKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKCk7IiBjbGFzcz0ibGlzdC1ncm91cC1pdGVtIgogICAgICAgICAgICAgICAgICAgICAgPjxzcGFuIGNsYXNzPSJmYSBmYS1jaXJjbGUgdGV4dC1yb3NlIGZsb2F0LXJpZ2h0Ij48L3NwYW4KICAgICAgICAgICAgICAgICAgICAgID5GcmllbmRzPC9hCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgpOyIgY2xhc3M9Imxpc3QtZ3JvdXAtaXRlbSIKICAgICAgICAgICAgICAgICAgICAgID48c3BhbgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtY2lyY2xlIHRleHQtc3VjY2VzcyBmbG9hdC1yaWdodCIKICAgICAgICAgICAgICAgICAgICAgID48L3NwYW4KICAgICAgICAgICAgICAgICAgICAgID5PZmZpY2U8L2EKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLSBFbmQgTGVmdCBzaWRlYmFyIC0tPgoKICAgICAgICAgICAgICA8IS0tIFJpZ2h0IFNpZGViYXIgLS0+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTkgY29sLW1kLTgiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTgiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi10b29sYmFyIiByb2xlPSJ0b29sYmFyIj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi1ncm91cCBtci0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG4gYnRuLW91dGxpbmUtcHJpbWFyeQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2F2ZXMtZWZmZWN0IHdhdmVzLWxpZ2h0CiAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWluYm94Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0biBidG4tb3V0bGluZS1wcmltYXJ5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXZlcy1lZmZlY3Qgd2F2ZXMtbGlnaHQKICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtcmVmcmVzaCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG4gYnRuLW91dGxpbmUtcHJpbWFyeQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2F2ZXMtZWZmZWN0IHdhdmVzLWxpZ2h0CiAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXRyYXNoLW8iPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi1ncm91cCBtci0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkgZHJvcGRvd24tdG9nZ2xlIgogICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIKICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1mb2xkZXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YiBjbGFzcz0iY2FyZXQiPjwvYj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFTY3JpcHQ6dm9pZCgpOyIgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+QWN0aW9uPC9hCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFTY3JpcHQ6dm9pZCgpOyIgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+QW5vdGhlciBhY3Rpb248L2EKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YVNjcmlwdDp2b2lkKCk7IiBjbGFzcz0iZHJvcGRvd24taXRlbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Tb21ldGhpbmcgZWxzZSBoZXJlPC9hCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duLWRpdmlkZXIiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFTY3JpcHQ6dm9pZCgpOyIgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+U2VwYXJhdGVkIGxpbms8L2EKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4tZ3JvdXAgbXItMSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhdmVzLWVmZmVjdCB3YXZlcy1saWdodAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24tdG9nZ2xlCiAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIKICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPSJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS10YWciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YiBjbGFzcz0iY2FyZXQiPjwvYj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFTY3JpcHQ6dm9pZCgpOyIgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+QWN0aW9uPC9hCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFTY3JpcHQ6dm9pZCgpOyIgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+QW5vdGhlciBhY3Rpb248L2EKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YVNjcmlwdDp2b2lkKCk7IiBjbGFzcz0iZHJvcGRvd24taXRlbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Tb21ldGhpbmcgZWxzZSBoZXJlPC9hCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duLWRpdmlkZXIiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFTY3JpcHQ6dm9pZCgpOyIgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+U2VwYXJhdGVkIGxpbms8L2EKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG4gYnRuLW91dGxpbmUtcHJpbWFyeQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2F2ZXMtZWZmZWN0IHdhdmVzLWxpZ2h0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi10b2dnbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9ImRyb3Bkb3duIgogICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgTW9yZQogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjYXJldCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZHJvcGRvd24tbWVudSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YVNjcmlwdDp2b2lkKCk7IiBjbGFzcz0iZHJvcGRvd24taXRlbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID5BY3Rpb248L2EKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YVNjcmlwdDp2b2lkKCk7IiBjbGFzcz0iZHJvcGRvd24taXRlbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID5Bbm90aGVyIGFjdGlvbjwvYQogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhU2NyaXB0OnZvaWQoKTsiIGNsYXNzPSJkcm9wZG93bi1pdGVtIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPlNvbWV0aGluZyBlbHNlIGhlcmU8L2EKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZHJvcGRvd24tZGl2aWRlciI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YVNjcmlwdDp2b2lkKCk7IiBjbGFzcz0iZHJvcGRvd24taXRlbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID5TZXBhcmF0ZWQgbGluazwvYQogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3NpdGlvbi1yZWxhdGl2ZSBoYXMtaWNvbi1yaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9InNlYXJjaCBtYWlsIgogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tY29udHJvbC1wb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zZWFyY2ggdGV4dC1pbmZvIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwhLS0gRW5kIHJvdyAtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgc2hhZG93LW5vbmUgbXQtMyBib3JkZXIgYm9yZGVyLWxpZ2h0Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYSBtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL2Jvb3RkZXkuY29tL2ltZy9Db250ZW50L2F2YXRhci9hdmF0YXIxLnBuZyIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InJvdW5kZWQtY2lyY2xlIG1yLTMgbWFpbC1pbWcgc2hhZG93IgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9Im1lZGlhIGltYWdlIgogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTAwIgogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjEwMCIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lZGlhLW1ldGEgZmxvYXQtcmlnaHQiPjA4OjIyIEFNPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9InRleHQtcHJpbWFyeSBtLTAiPkpob24gRGVvPC9oND4KICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LW11dGVkIgogICAgICAgICAgICAgICAgICAgICAgICAgID5Gcm9tIDogaW5mb0BleGFtcGxlLmNvbTwvc21hbGwKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPCEtLSBtZWRpYSAtLT4KCiAgICAgICAgICAgICAgICAgICAgPHA+PGI+SGkgU2lyLi4uPC9iPjwvcD4KICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ZXIgYWRpcGlzY2luZwogICAgICAgICAgICAgICAgICAgICAgZWxpdC4gQWVuZWFuIGNvbW1vZG8gbGlndWxhIGVnZXQgZG9sb3IuIEFlbmVhbiBtYXNzYS4KICAgICAgICAgICAgICAgICAgICAgIEN1bSBzb2NpaXMgbmF0b3F1ZSBwZW5hdGlidXMgZXQgbWFnbmlzIGRpcyBwYXJ0dXJpZW50CiAgICAgICAgICAgICAgICAgICAgICBtb250ZXMsIG5hc2NldHVyIHJpZGljdWx1cyBtdXMuIERvbmVjIHF1YW0gZmVsaXMsCiAgICAgICAgICAgICAgICAgICAgICB1bHRyaWNpZXMgbmVjLCBwZWxsZW50ZXNxdWUgZXUsIHByZXRpdW0gcXVpcywgc2VtLgogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgIEFlbmVhbiB2dWxwdXRhdGUgZWxlaWZlbmQgdGVsbHVzLiBBZW5lYW4gbGVvIGxpZ3VsYSwKICAgICAgICAgICAgICAgICAgICAgIHBvcnR0aXRvciBldSwgY29uc2VxdWF0IHZpdGFlLCBlbGVpZmVuZCBhYywgZW5pbS4KICAgICAgICAgICAgICAgICAgICAgIEFsaXF1YW0gbG9yZW0gYW50ZSwgZGFwaWJ1cyBpbiwgdml2ZXJyYSBxdWlzLCBmZXVnaWF0IGEsCiAgICAgICAgICAgICAgICAgICAgICB0ZWxsdXMuIFBoYXNlbGx1cyB2aXZlcnJhIG51bGxhIHV0IG1ldHVzIHZhcml1cyBsYW9yZWV0LgogICAgICAgICAgICAgICAgICAgICAgUXVpc3F1ZSBydXRydW0uIEFlbmVhbiBpbXBlcmRpZXQuIEV0aWFtIHVsdHJpY2llcyBuaXNpCiAgICAgICAgICAgICAgICAgICAgICB2ZWwgYXVndWUuIEN1cmFiaXR1ciB1bGxhbWNvcnBlciB1bHRyaWNpZXMgbmlzaS4gTmFtCiAgICAgICAgICAgICAgICAgICAgICBlZ2V0IGR1aS4gRXRpYW0gcmhvbmN1cy4gTWFlY2VuYXMgdGVtcHVzLCB0ZWxsdXMgZWdldAogICAgICAgICAgICAgICAgICAgICAgY29uZGltZW50dW0gcmhvbmN1cywgc2VtIHF1YW0gc2VtcGVyIGxpYmVybywgc2l0IGFtZXQKICAgICAgICAgICAgICAgICAgICAgIGFkaXBpc2Npbmcgc2VtIG5lcXVlIHNlZCBpcHN1bS4gTmFtIHF1YW0gbnVuYywgYmxhbmRpdAogICAgICAgICAgICAgICAgICAgICAgdmVsLCBsdWN0dXMgcHVsdmluYXIsCiAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgTnVsbGEgY29uc2VxdWF0IG1hc3NhIHF1aXMgZW5pbS4gRG9uZWMgcGVkZSBqdXN0bywKICAgICAgICAgICAgICAgICAgICAgIGZyaW5naWxsYSB2ZWwsIGFsaXF1ZXQgbmVjLCB2dWxwdXRhdGUgZWdldCwgYXJjdS4gSW4KICAgICAgICAgICAgICAgICAgICAgIGVuaW0ganVzdG8sIHJob25jdXMgdXQsIGltcGVyZGlldCBhLCB2ZW5lbmF0aXMgdml0YWUsCiAgICAgICAgICAgICAgICAgICAgICBqdXN0by4gTnVsbGFtIGRpY3R1bSBmZWxpcyBldSBwZWRlIG1vbGxpcyBwcmV0aXVtLgogICAgICAgICAgICAgICAgICAgICAgSW50ZWdlciB0aW5jaWR1bnQuIENyYXMgZGFwaWJ1cy4gVml2YW11cyBlbGVtZW50dW0KICAgICAgICAgICAgICAgICAgICAgIHNlbXBlciBuaXNpLgogICAgICAgICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgICAgICAgICAgPGhyIC8+CiAgICAgICAgICAgICAgICAgICAgPGg0PgogICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXBhcGVyY2xpcCBtci0yIj48L2k+IEF0dGFjaG1lbnRzCiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4oMyk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTQgY29sLW1kLTMiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoKTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9ib290ZGV5LmNvbS9pbWcvQ29udGVudC9hdmF0YXIvYXZhdGFyNi5wbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9ImF0dGFjaG1lbnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLXRodW1ibmFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS00IGNvbC1tZC0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKCk7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vYm9vdGRleS5jb20vaW1nL0NvbnRlbnQvYXZhdGFyL2F2YXRhcjIucG5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJhdHRhY2htZW50IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZy10aHVtYm5haWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNCBjb2wtbWQtMyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgpOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL2Jvb3RkZXkuY29tL2ltZy9Db250ZW50L2F2YXRhci9hdmF0YXIzLnBuZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iYXR0YWNobWVudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctdGh1bWJuYWlsIgogICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYSBtdC0zIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgpOyIgY2xhc3M9Im1lZGlhLWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL2Jvb3RkZXkuY29tL2ltZy9Db250ZW50L2F2YXRhci9hdmF0YXIxLnBuZyIKICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iNTAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSI1MCIKICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0id3lzaWh0bWw1IGZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgICAgICAgICByb3dzPSI5IgogICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJSZXBseSBoZXJlLi4uIgogICAgICAgICAgICAgICAgICAgICAgICA+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtcmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgd2F2ZXMtZWZmZWN0IHdhdmVzLWxpZ2h0IG10LTMiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zZW5kIG1yLTEiPjwvaT4gU2VuZAogICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8IS0tIGNhcmQgLS0+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLSBlbmQgQ29sLTkgLS0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tIEVuZCByb3cgLS0+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDwhLS0gRW5kIHJvdyAtLT4KICA8L2Rpdj4KPC9kaXY+Cg=="},null]}