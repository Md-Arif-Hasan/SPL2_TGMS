{"remainingRequest":"E:\\SPL -22\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\tgms\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\SPL -22\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\tgms\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!E:\\SPL -22\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\tgms\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\SPL -22\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\tgms\\src\\components\\home2.vue?vue&type=template&id=19e6bc5a&scoped=true&","dependencies":[{"path":"E:\\SPL -22\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\tgms\\src\\components\\home2.vue","mtime":1654457216151},{"path":"E:\\SPL -22\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\tgms\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1654457207255},{"path":"E:\\SPL -22\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\tgms\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1654457215284},{"path":"E:\\SPL -22\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\tgms\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1654457207255},{"path":"E:\\SPL -22\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\SPL2_TGMS\\tgms\\node_modules\\vue-loader\\lib\\index.js","mtime":1654457215284}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}